:root {
	--color-primary: #{map-get($custom-colors, "primary")};
	--color-primary1: #{map-get($custom-colors, "primary1")};
	--color-primary2: #{map-get($custom-colors, "primary2")};
	--color-primary3: #{map-get($custom-colors, "primary3")};
	--color-primary4: #{map-get($custom-colors, "primary4")};
	--color-secondary: #{map-get($custom-colors, "secondary")};
	--color-secondary1: #{map-get($custom-colors, "secondary1")};
	--color-secondary2: #{map-get($custom-colors, "secondary2")};
	--color-accent: #{map-get($custom-colors, "accent")};
	--color-accent1: #{map-get($custom-colors, "accent1")};
	--color-error: #{map-get($custom-colors, "error")};
	--color-error1: #{map-get($custom-colors, "error1")};
	--color-warning: #{map-get($custom-colors, "warning")};
	--color-active-star: #{map-get($custom-colors, "active-star")};
	--color-star: #{map-get($custom-colors, "active-star")};
	--color-warning1: #{map-get($custom-colors, "warning1")};
	--color-blue-light: #{map-get($custom-colors, "blue-light")};
}

//variable
$spacer-sizes: map-merge(
	(
		"2px": 2px,
		"5px": 5px,
		"10px": 10px,
		"20px": 20px,
		"30px": 30px,
		"50px": 50px,
		"9px": 9px,
	),
	$spacer-sizes
);
$spacer-directions: (
	"a": "all",
	"x": "x",
	"y": "y",
	"l": "left",
	"r": "right",
	"b": "bottom",
	"t": "top",
);
$spacer-properties: (
	"margin": "m",
	"padding": "p",
);
//margins

@each $prop-name, $prop-word in $spacer-properties {
	@each $dir-name, $dir-prop in $spacer-directions {
		@each $size-name, $size-val in $spacer-sizes {
			.#{$prop-word}#{$dir-name}-#{$size-name} {
				@if $dir-name == "a" {
					#{$prop-name}: #{$size-val} !important;
				} @else if $dir-name == "x" {
					#{$prop-name}-left: #{$size-val} !important;
					#{$prop-name}-right: #{$size-val} !important;
				} @else if $dir-name == "y" {
					#{$prop-name}-top: #{$size-val} !important;
					#{$prop-name}-bottom: #{$size-val} !important;
				} @else {
					#{$prop-name}-#{$dir-prop}: #{$size-val} !important;
				}
			}
		}
	}
}

//fonts
$font-sizes: map-merge(
	(
		"xsmall": 10px,
		"small": 12px,
		"medium": 14px,
		"xlarge": 16px,
		"large": 18px,
		"20px":20px,
		"24px": 24px,
		"title": 50px,
		"subtitle-1": 26px,
		"subtitle-2": 20px,
	),
	$font-sizes
);
@each $size-name, $size in $font-sizes {
	.font-size-#{$size-name} {
		font-size: $size !important;
	}
}
//color
$custom-color-exclude: ("primary", "error", "secondary", "warning", "accent");
@each $name, $color in $custom-colors {
	@if null == index($custom-color-exclude, $name) {
		.#{$name} {
			background-color: $color !important;
			&--text {
				color: $color !important;
			}
		}
	}
}
// //padding && marrgin
//border
$border: (
	"top": "t",
	"bottom": "b",
	"left": "l",
	"right": "r",
	"all": "a",
);
@each $type, $val in $border {
	.border-#{$val} {
		@if #{$val} == "a" {
			border: thin solid map-get($custom-colors, primary2) !important;
		} @else {
			border-#{$type}: thin
				solid
				map-get($custom-colors, primary2) !important;
		}
	}
}
.page-tab-scrollable {
	&__tabcontent {
		height: calc(100% - 48px);
	}
}
//
.line-height-initial {
	line-height: initial;
}
//
.v-list-item--none-hover {
	&::before {
		opacity: 0 !important;
	}
}

.v-fieldset {
	border: 1px solid get-color("primary2");
	border-radius: $border-radius-root;
	margin-bottom: 20px;
	padding: 14px 20px 20px 20px;
	& > legend {
		border: 1px solid get-color("primary2");
		background-color: get-color("primary3");
		border-radius: $border-radius-root;
		color: get-color("primary");
		font-size: $font-size-root;
		font-weight: bold;
		height: 40px;
		line-height: 30px;
		padding: 5px 10px;
		text-transform: uppercase;
	}
}
.break--work {
	word-break: break-word !important;
}
.v-text-field.v-input--is-disabled {
	& .v-input__slot {
		background-color: get-color(primary3) !important;
	}
}